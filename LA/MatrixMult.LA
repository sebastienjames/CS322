void main(){
    :entry
    int64 numRowA
    int64 trueNumRowA
    int64 numColA
    int64 trueNumColA
    int64 sizeA
    int64 truesizeA
    int64 fullSize
    int64 truefullsize
    int64[] Matrix
    int64 i
    int64 j
    int64 k
    int64 Condition
    int64 Condition1
    int64 Condition2
    int64 Condition3
    int64 Item

    int64 numRowB
    int64 trueNumRowB
    int64 numColB
    int64 trueNumColB
    int64 sizeB
    int64 truesizeB

    int64 APos
    int64 A_Buffer
    int64 BPos
    int64 B_Buffer
    int64 NumA
    int64 NumA_Adjusted
    int64 NumB
    int64 NumB_Adjusted
    int64 AnswerUnfiltered
    int64 AnswerFiltered
    int64 BigAnswer
    int64 BIncease


    numRowA<-input()
    trueNumRowA<-numRowA

    numColA<-input()
    trueNumColA<-numColA

    sizeA <- trueNumRowA*trueNumColA
    truesizeA <- sizeA

    fullSize<-sizeA*4
    //fullSizeT<-fullSize+1
    //print(fullSizeT)
    fullSize<-fullSize+1
    truefullsize <- fullSize
    //print (fullSize)
    Matrix<-new Array(truefullsize)
    i <- 1
    j <- 1
    k <-0
    //print(i)
  
    //Initialize Array
    br :startLoopA
    :startLoopA
    Item<-input()
    //print(Item)
    Matrix[k] <- Item
    i<-i+1
    j<-j+1
    k<-k+1
    Condition<- i<=truesizeA
    br Condition :startLoopA :endLoopA
    :endLoopA

    numRowB<-input()
    trueNumRowB<-numRowB
    //print(numRowB)
    numColB<-input()
    trueNumColB<-numColB
    //print(numColB)
    sizeB <- trueNumRowB*trueNumColB
    truesizeB <- sizeB

    i<-1
    br :startLoopB
    //Initialize Rest of Array
    :startLoopB
    Item<-input()
    //print(Item)
    Matrix[k] <- Item
    i<-i+1
    j<-j+1
    k<-k+1
    Condition<- i<=truesizeB
    br Condition :startLoopB :endLoopB
    :endLoopB

    //i<-1
    //br :testLoopAll
    //:testLoopAll
        //Mlt <- i*8
        //Pos <- Matrix_Start+Mlt
        //test <- load Pos
        //print(test)
        //i <- i+2
        //Condition1 <- i<=fullSize
        //br Condition1 :testLoopAll :endTestLoopAll
    //:endTestLoopAll

    
    print(numRowA)
    print(numColB)



    //Multiply A Row Against A Column
    k <- 1
    A_Buffer<-0
    B_Buffer<-sizeA
    br :OuterLoop
    :OuterLoop
    j<-1
    br :MiddleLoop
    :MiddleLoop
        APos<-A_Buffer
        BPos<-B_Buffer
        BigAnswer<-0
        i<-1
        br :InnerLoop
        :InnerLoop
            //Get A Number
            NumA <- Matrix[APos]
            NumA_Adjusted<-NumA
            //print(NumA)


            //Get B Number
            NumB <- Matrix[BPos]
            NumB_Adjusted<-NumB
            //print(NumB)


            //Get Answer
            AnswerUnfiltered<-NumA_Adjusted*NumB_Adjusted
            AnswerFiltered<-AnswerUnfiltered
            //print(AnswerFiltered)

            //Update BigAnswer
            BigAnswer<-BigAnswer+AnswerFiltered
            //Update Counters
            i <- i + 1
            APos <- APos + 1
            BIncease <- trueNumColB
            BPos <- BPos + BIncease
            Condition <- i<=numColA
            br Condition :InnerLoop :nextLoop
        //go to next comlumn
        :nextLoop
        //print(12343215)
        B_Buffer<-B_Buffer+1
        // BigAnswer<-BigAnswer-2
        print(BigAnswer)
        j<-j+1
        Condition2 <- j<=numColB
        br Condition2 :MiddleLoop :nextLoop2
    :nextLoop2
    //print(9999999)
    k <- k+1
    A_Buffer<-APos
    B_Buffer<-sizeA
    Condition3 <- k<=numRowA
    br Condition3 :OuterLoop :endLoopC
    :endLoopC

    return
}