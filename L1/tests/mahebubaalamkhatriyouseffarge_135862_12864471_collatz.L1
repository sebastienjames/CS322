// Makes and prints an array of the first N = 10 numbers in collatz 
// conjecture with a starting value M = 7

(@collatz
  (@collatz
    0 1
    rdi <- 10                   // Set size of array (N = 5)
    cjump rdi < 1 :abort        // Array has at least 1 element
    rdi <<= 1
    rdi ++
    rsi <- 0                    // Initialize array elements to 0
    rsi <<= 1
    rsi ++
    mem rsp 0 <- rdi
    call allocate 2
    rdi <- mem rsp 0

    r8 <- 7                     // Starting number (M = 7)
    r8 <<= 1
    r8 ++
    mem rax 8 <- r8

    r9 <- 1                     // Index of current element

    :control
    r10 @ rax r9 8              // Address of current element
    r11 <- mem r10 0            // Value of current element
    r11 >>= 1
    rcx <- r11 
    rcx &= 1                    // Determine if current element is even or odd
    cjump rcx = 0 :evencase
    cjump rcx = 1 :oddcase

    :evencase
    r11 >>= 1                   // Divide by 2
    goto :populate

    :oddcase
    r11 *= 3                    // Multiply by 3, add 1
    r11 ++
    goto :populate
    
    :populate
    r9 ++                       // Increments current element index
    r10 @ rax r9 8
    r11 <<= 1
    r11 ++
    mem r10 0 <- r11            // Adds to the array (after encoding it)
    cjump rdi <= r9 :finish
    goto :control
    
    :abort
    return

    :finish
    rdi <- rax
    call print 1                // Print the array
    return
  )
)
