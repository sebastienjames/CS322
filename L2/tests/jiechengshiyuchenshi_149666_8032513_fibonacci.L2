// fibonacci
// iterative approach
(@go
    (@go
        0
        mem rsp -8 <- :goCallsFibonacciReturn
        rdi <- 20 // compute fibonacci 20th term
        call @fibonacci 1
        :goCallsFibonacciReturn
        rdi <- rax
        rdi <<= 1
        rdi += 1 // encode return value
        call print 1 // and print, should be 6765
        return
    )
    (@fibonacci // def fibonacci(n: int) -> int
        1
        cjump rdi = 1 :fibonacciInitialCondition // if n == 1: return 1
        cjump rdi = 2 :fibonacciInitialCondition // if n == 2: return 1
        // else
        %a <- 1 // a = 1
        %b <- 1 // b = 1

        %i <- 3 // i = 3
        :fibonacciFor // for i in range(3, 21)
            cjump %i <= rdi :fibonacciForIntoLoop // if i < 21
            rax <- %res
            return // if i >= 21: return res

            :fibonacciForIntoLoop
            %res <- %a
            %res += %b // res = a + b
            %a <- %b // a = b
            %b <- %res // b = res

            %i ++
            cjump 1 = 1 :fibonacciFor

        :fibonacciInitialCondition
        rax <- 1 // return 1
        return
    )
)
